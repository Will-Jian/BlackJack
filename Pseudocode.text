Black Jack


1) Define required constants
	1.1) define the cards deck with 4 different suits and the cards within each suit.  (Spades,hearts,clover,diamonds)(Ace through king) 
Arr of obj *
	1.2) define the board with 5 card positions on each side of the board with null spaces to identify they are empty before the game starts.  - cached

	1.3) define the winning conditions- if  player reaches 21 stop and wait for dealer or if the dealer reaches 21 stop and let dealer win. If both are 21 it is a tie. 

	1.4) How much wager they start out with  total amount of chips 


2) Define required variables used to track the state of the game

	2.1 Using two arrays to represent the spaces that cards will be dealt on (one for dealer on for player) . (Will try to add the card points in the array to calculate the total points. 

	2.2) player first until player finishes their move then its the dealers turn .


	2.3) winner variable to represent who wins

	2.4) player hand variable and dealer hand variable to store the points of the cards being dealt. 



3) Store elements on the page that will be accessed in code more than once in variables to make code more concise, readable and performant.

 	3.1) store the arrays/ card positions that will represent the hands of the dealer or player. 
	3.2) Function to check Between 18-21 dealer stops 



4) Upon loading the app should:
  4.1) Initialize the board with with 5 nulls on each side of the board to represent empty cards. 

4.1.2)  initialize the winner to null 

4.2.2) initialize a wager - where the player is able to place amount of chips in increments of 5. Subtracting out of the total player chips 

4.2) Upon pressing start button render a function to start dealing the cards - (event listener) 

Call render every time something changes in the back end for it to show up in the front end. 

  4.2) Render those values to the page

	 5 spaces on each side to store the values of each card. 
	render shuffle so the deck of cards will be randomized -> store it as random and pick from the top (first array) 
	4.2.3) render the index to access the mapped value of the array so that cards will not be placed if there is already a card there when placing a new card. (iterate over each card position arr to see if there is a value given. If there is then move to the next one.  


  4.3) Wait for the user to click hit or stand

5) Handle a player clicking hit 

5.1) clicking hit - 
	guards - if it is 21 cannot hit (check to see if the cards together dealt is 21 or over) otherwise clicking hit will add a card from the shuffled deck 
	5.1.2) if hits over 21 => immediately lose and dealer wins. 

5.2) 
Handle a player hitting stand - 
Stops the turn on the player and moves over to the dealer running a dealer hit function only running when the points combined together are less than 17/18 —>> when is above 17/18 runs a dealer stand function which runs a winning function to compare the points between the two array. 


Handle a player hitting split - will be hidden at first only appears if it passes the guard of both cards being the same 


5.3) winning definition
After the dealer is done hitting and hits stand call back a winning function where dealer hand array/ player hand arr is compared  


6) Handle a player clicking the replay button
Re initialize the board 




— Card is dealt to the player first then the dealer faced down.  Then player again… then dealer again faced up. 

Turn starts with player choosing to hit or stand. 

Implement split function —> function to check if the two cards dealt are the same if so the split button will appear 
Create another (or two) empty arr to store the two cards as separate hands that can hit. Move the two cards dealt to the two empty arrays.  